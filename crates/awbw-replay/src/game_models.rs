use crate::de::deserialize_vec_pair;
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct AwbwGame {
    pub id: u32,
    pub name: String,
    pub password: String,
    pub creator: u32,
    pub start_date: String,
    pub end_date: Option<String>,
    pub activity_date: String,
    pub maps_id: u32,
    pub weather_type: String,
    pub weather_start: Option<u32>,
    pub weather_code: String,
    pub win_condition: Option<String>,
    pub turn: u32,
    pub day: u32,
    pub active: String,
    pub funds: u32,
    pub capture_win: u32,
    pub fog: String,
    pub comment: Option<String>,
    #[serde(rename = "type")]
    pub game_type: String,
    pub boot_interval: i32,
    pub starting_funds: u32,
    pub official: String,
    pub min_rating: u32,
    pub max_rating: Option<u32>,
    pub league: Option<String>,
    pub team: String,
    pub aet_interval: i32,
    pub aet_date: String,
    pub use_powers: String,
    #[serde(deserialize_with = "deserialize_vec_pair")]
    pub players: Vec<(u32, AwbwPlayer)>,
    #[serde(deserialize_with = "deserialize_vec_pair")]
    pub buildings: Vec<(u32, AwbwBuilding)>,
    #[serde(deserialize_with = "deserialize_vec_pair")]
    pub units: Vec<(u32, AwbwUnit)>,
    pub timers_initial: u32,
    pub timers_increment: u32,
    pub timers_max_turn: u32,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct AwbwPlayer {
    pub id: u32,
    pub users_id: u32,
    pub games_id: u32,
    pub countries_id: u32,
    pub co_id: u32,
    pub funds: u32,
    pub turn: Option<String>,
    pub email: Option<String>,
    pub uniq_id: Option<String>,
    pub eliminated: String,
    pub last_read: String,
    pub last_read_broadcasts: Option<String>,
    pub emailpress: Option<String>,
    pub signature: Option<String>,
    pub co_power: u32,
    pub co_power_on: String,
    pub order: u32,
    pub accept_draw: String,
    pub co_max_power: u32,
    pub co_max_spower: u32,
    pub co_image: String,
    pub team: String,
    pub aet_count: u32,
    pub turn_start: String,
    pub turn_clock: u32,
    pub tags_co_id: Option<String>,
    pub tags_co_power: Option<String>,
    pub tags_co_max_power: Option<String>,
    pub tags_co_max_spower: Option<String>,
    pub interface: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct AwbwBuilding {
    pub id: u32,
    pub games_id: u32,
    pub terrain_id: u32,
    pub x: u32,
    pub y: u32,
    pub capture: u32,
    pub last_capture: u32,
    pub last_updated: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct AwbwUnit {
    pub id: u32,
    pub games_id: u32,
    pub players_id: u32,
    pub name: String,
    pub movement_points: u32,
    pub vision: u32,
    pub fuel: u32,
    pub fuel_per_turn: u32,
    pub sub_dive: String,
    pub ammo: u32,
    pub short_range: u32,
    pub long_range: u32,
    pub second_weapon: String,
    pub symbol: String,
    pub cost: u32,
    pub movement_type: String,
    pub x: u32,
    pub y: u32,
    pub moved: u32,
    pub capture: u32,
    pub fired: u32,
    pub hit_points: f64,
    pub cargo1_units_id: u32,
    pub cargo2_units_id: u32,
    pub carried: String,
}
